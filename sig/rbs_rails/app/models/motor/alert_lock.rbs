module Motor
  class AlertLock < ::Motor::ApplicationRecord
    extend _ActiveRecord_Relation_ClassMethods[Motor::AlertLock, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def alert_id: () -> Integer

      def alert_id=: (Integer) -> Integer

      def alert_id?: () -> bool

      def alert_id_changed?: () -> bool

      def alert_id_change: () -> [ Integer?, Integer? ]

      def alert_id_will_change!: () -> void

      def alert_id_was: () -> Integer?

      def alert_id_previously_changed?: () -> bool

      def alert_id_previous_change: () -> Array[Integer?]?

      def alert_id_previously_was: () -> Integer?

      def alert_id_before_last_save: () -> Integer?

      def alert_id_change_to_be_saved: () -> Array[Integer?]?

      def alert_id_in_database: () -> Integer?

      def saved_change_to_alert_id: () -> Array[Integer?]?

      def saved_change_to_alert_id?: () -> bool

      def will_save_change_to_alert_id?: () -> bool

      def restore_alert_id!: () -> void

      def clear_alert_id_change: () -> void

      def lock_timestamp: () -> String

      def lock_timestamp=: (String) -> String

      def lock_timestamp?: () -> bool

      def lock_timestamp_changed?: () -> bool

      def lock_timestamp_change: () -> [ String?, String? ]

      def lock_timestamp_will_change!: () -> void

      def lock_timestamp_was: () -> String?

      def lock_timestamp_previously_changed?: () -> bool

      def lock_timestamp_previous_change: () -> Array[String?]?

      def lock_timestamp_previously_was: () -> String?

      def lock_timestamp_before_last_save: () -> String?

      def lock_timestamp_change_to_be_saved: () -> Array[String?]?

      def lock_timestamp_in_database: () -> String?

      def saved_change_to_lock_timestamp: () -> Array[String?]?

      def saved_change_to_lock_timestamp?: () -> bool

      def will_save_change_to_lock_timestamp?: () -> bool

      def restore_lock_timestamp!: () -> void

      def clear_lock_timestamp_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def alert: () -> Motor::Alert
    def alert=: (Motor::Alert?) -> Motor::Alert?
    def reload_alert: () -> Motor::Alert?
    def build_alert: (untyped) -> Motor::Alert
    def create_alert: (untyped) -> Motor::Alert
    def create_alert!: (untyped) -> Motor::Alert
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Motor::AlertLock, Integer]
      include Enumerable[Motor::AlertLock]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Motor::AlertLock, Integer]
    end
  end
end
