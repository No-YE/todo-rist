module GoodJob
  class Process < ::GoodJob::BaseRecord
    extend _ActiveRecord_Relation_ClassMethods[GoodJob::Process, ActiveRecord_Relation, String]

    module GeneratedAttributeMethods
      def id: () -> String

      def id=: (String) -> String

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ String?, String? ]

      def id_will_change!: () -> void

      def id_was: () -> String?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[String?]?

      def id_previously_was: () -> String?

      def id_before_last_save: () -> String?

      def id_change_to_be_saved: () -> Array[String?]?

      def id_in_database: () -> String?

      def saved_change_to_id: () -> Array[String?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void

      def state: () -> untyped?

      def state=: (untyped?) -> untyped?

      def state?: () -> bool

      def state_changed?: () -> bool

      def state_change: () -> [ untyped?, untyped? ]

      def state_will_change!: () -> void

      def state_was: () -> untyped?

      def state_previously_changed?: () -> bool

      def state_previous_change: () -> Array[untyped?]?

      def state_previously_was: () -> untyped?

      def state_before_last_save: () -> untyped?

      def state_change_to_be_saved: () -> Array[untyped?]?

      def state_in_database: () -> untyped?

      def saved_change_to_state: () -> Array[untyped?]?

      def saved_change_to_state?: () -> bool

      def will_save_change_to_state?: () -> bool

      def restore_state!: () -> void

      def clear_state_change: () -> void
    end
    include GeneratedAttributeMethods

    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[GoodJob::Process, String]
      include Enumerable[GoodJob::Process]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[GoodJob::Process, String]
    end
  end
end
